//============================================================================
// ファイル名  : chapter02-01.cpp
// 来歴        : 2019/04/25 新規作成 K.Asada
// 概要        : ビットシフトにより2のべき乗での演算と同じ結果が得られることを確認する。
//============================================================================

#include <iostream>
using namespace std;

int main() {
	unsigned int shiftNum = 64;		// シフト対象（べき乗がわかりやすいように2の6乗で初期化
	unsigned int calcNum = 64;		// 演算対象（べき乗がわかりやすいように2の6乗で初期化
	int shiftBit = 1;				// シフト数
	int expCalc = 2;				// べき乗数

	// 4回ずつビットシフト/べき乗による乗算を行い、値を確認
	for(int i = 0; i < 4; i++){
		// ビットシフトを行う
		shiftNum <<= shiftBit;
		// 算術演算を行う
		calcNum *= expCalc;

		// ビットシフトの値を確認
		cout << "ビットシフト：" << shiftNum << '\n';
		// 乗算の値を確認
		cout << "2のべき乗での乗算：" << calcNum << '\n';
		// ビットシフトと算術演算の値を比較し、等しいかを確認
		if(shiftNum == calcNum){
			// 正しいことを出力
			cout << "は等しい\n";

		// 等しくない場合はそれを出力
		} else {
			// 正しくないことを出力
			cout << "は等しくない\n";
		}
	}

	// 4回ずつビットシフト/べき乗による除算を行い、値を確認
	for(int i = 0; i < 4; i++){
		// ビットシフトを行う
		shiftNum >>= shiftBit;
		// 算術演算を行う
		calcNum /= expCalc;

		// ビットシフトの値を確認
		cout << "ビットシフト：" << shiftNum << '\n';
		// 乗算の値を確認
		cout << "2のべき乗での除算：" << calcNum << '\n';
		// ビットシフトと算術演算の値を比較し、等しいかを確認
		if(shiftNum == calcNum){
			// 正しいことを出力
			cout << "は等しい\n";

		// 等しくない場合はそれを出力
		} else {
			// 正しくないことを出力
			cout << "は等しくない\n";
		}
	}

	return 0;
}
